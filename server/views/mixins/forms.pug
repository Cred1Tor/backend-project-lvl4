- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, label, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= label
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, collection, label, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= label
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)
      option
      each item in collection
        - const selectedOption = item.id === _.get(entity, propertyName);
          option(value=item.id selected=selectedOption)= item.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin selectMultiple(entity, propertyName, collection, label, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= label
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      multiple
    )&attributes(attributes)
      option
      - const selectedItems = entity[propertyName] && _.concat(entity[propertyName]);
      each item in collection
        - const selectedOption = selectedItems && selectedItems.some((id) => id === item.id);
          option(value=item.id selected=selectedOption)= item.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  .form-group
    input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
